# @uses dtca_cycles_dbl

h : V
i : V
j : V

_between : V * V * V -> bool

make_noncyclic := program([
	i := h ; j := null ;
    while $i != h | j = null$ {$I$} (
       j := i ;
       i := i.n1
    ) ;
	j.n1 := null ;
    h.n2 := null 
 ])

P := on_cycle1(h) &
 	 forall u v w (_between(u,v,w) <-> between1(u,v,w)) &
     legal_prev
	 
I := on_cycle1(h) & n1*(h,i) &
     ite(j = null, i = h, n1*(h,j) & n1tot_(j,i)) &
 	 forall u v w (_between(u,v,w) <-> between1(u,v,w)) &
     legal_prev
	 
Q :=  ~on_cycle1(h) & 
   	  legal_prev &
	  forall u v (v != h -> (_between(h,u,v)) <-> (n1*(u,v) & n1*(h,u)))
	   
lemma(P -> wp(make_noncyclic,Q))

