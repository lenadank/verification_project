
[filter] := program([
    i := h ;
    j := null ;
    while $i != null$ {$I$} (
       if $~C(i)$ then
          ( t := i.n; j.n := null; j.n := t )
       else j := i; 
       i := i.n
    )
  ])
  
(null : V)
(n*0 : V * V -> bool) -> (n* : V * V -> bool)

(h0 : V) -> (h : V)
(i0 : V) -> (i : V)
(j0 : V) -> (j : V)

(C : V -> bool)

(alloc0 : V -> bool) -> (alloc : V -> bool)

init     :=  i = h & j = null &
             (forall v (h != null -> (n*(h,v) -> alloc(v)))) &
             ~alloc(null)

cond     :=  i != null
loopBody :=  program([
                if $~C(i)$ then (
                   (if $i = h$ then
                      h := i.n
                   else (
                      t := i.n;
                      j.n := null;
                      j.n := t
                   ));
                   void := free(i)
                )
                else
                   j := i;
                i := i.n
             ])

# Safety property specifies three aspects of the program:
# 1) the result contains only elements satisfying C and no new elements were added;
# 2) the absence of memory leaks;
# 3) the stability of the procedure (preserves the order of elements).

post     :=  true
bad      :=  ~ite(cond, wp_ae(loopBody,true), post)

