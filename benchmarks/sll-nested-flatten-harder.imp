#
#  h
#   \    p     p     p
#    [ ]-->[ ]-->[ ]-->[ ]
#   n |  p
#    [ ]-->[ ]
#   n |  p     p
#    [ ]-->[ ]-->[ ]
#   n |  p     p
#    [ ]-->[ ]-->[ ]
#

# flatten(h)
#	i := h;
#	j := null;
#	while $i != null$ {$I1$} (
#		k := i;
#		while $k != null$ {$I2$} (
#			j := k;
#			k := k.p
#		) ;
#		k := i.n; i.n := null; i := k; j.p := i
#	)
 
h : V
(i0 : V) -> (i : V)
(j0 : V) -> (j : V)
(k0 : V) -> (k : V)

(n0* : V * V -> bool) -> (n* : V * V -> bool)
(p0* : V * V -> bool) -> (p* : V * V -> bool)
_n* : V * V -> bool
_p* : V * V -> bool

# program counter mockup
(loc10 : bool) -> (loc1 : bool)
(loc20 : bool) -> (loc2 : bool)
(loc30 : bool) -> (loc3 : bool)

dtca(p*)
dtca(p0*)
dtca(_p*)
dtca(_n*)

loc1 -> ~(loc2 | loc3)
loc2 -> ~(loc1 | loc3)
loc3 -> ~(loc1 | loc2)

init := loc1 & ~loc2 & ~loc3 & i = h & j = null &
     forall z u y (n*(h,z) & p*(z,u) & n*(h,y) & p*(y,u) -> z = y) &
     forall u v w (u != v -> v != w -> _p*(u,v) -> ~n*(v,w)) &
     forall u v (p*(u,v) <-> _p*(u,v)) &
     forall u v (n*(u,v) <-> _n*(u,v))

cond := loc1 -> i != null
loopBody := program([
  if $loc1$ then (
    k := i ; loc1 := false ; loc2 := true
  ) else
  (if $loc2$ then (
    if $k != null$ then ( j := k ; k := k.p )
    else ( loc2 := false ; loc3 := true )
   ) else
   if $loc3$ then (
     k := i.n ; i.n := null ; i := k ;
     j.p := i ; loc3 := false ; loc1 := true
   ) else skip
  )])

#post := true
post := forall z u (_n*(h,z) & _p*(z,u) -> p*(h,u))
bad := ~ite(cond, wp_ae(loopBody,true), post)

